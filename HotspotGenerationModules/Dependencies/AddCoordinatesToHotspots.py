from shapely.geometry import Point, Polygon
from shapely.ops import unary_union

def AddCoordinatesToGridCellBasedHotspots(Hotspot: list, xx: list, yy: list):
    """This function takes the point based cell based hotspots generated using hotspot generation module using
    BFS_of_Cells and add coordinates having latitude longitude pair from the main grid.

        Parameters
        ----------
        Hotspots: list
            The grid point based hotspots generated by the BFS method
        xx : list
            X axis lists from the numpy meshgrid
        yy : list
            Y axis lists from the numpy meshgrid

        Returns
        -------
        list of list
            the hotspots list, where the initial point of the cell is converted into middle point of the cell and
            each point is represented by their latitude longitude pairs
        """
    newHotspot = []
    for point in Hotspot:
        #  Find the coordinates of the four points of the cell and calculate middle point of cell coordinate
        coordinate = Point((xx[point[0]][0] + xx[point[0]+1][0])/2 , (yy[0][point[1]] + yy[0][point[1]+1])/2)
        newHotspot.append(coordinate)


    return  newHotspot

def AddCoordinatesToGridCellBasedHotspotsNoPointObject(Hotspot: list, xx: list, yy: list):
    """This function takes the point based cell based hotspots generated using hotspot generation module using
    BFS_of_Cells and add coordinates having latitude longitude pair from the main grid.

        Parameters
        ----------
        Hotspots: list
            The grid point based hotspots generated by the BFS method
        xx : list
            X axis lists from the numpy meshgrid
        yy : list
            Y axis lists from the numpy meshgrid

        Returns
        -------
        list of list
            the hotspots list, where the initial point of the cell is converted into middle point of the cell and
            each point is represented by their latitude longitude pairs
        """
    newHotspot = []
    for point in Hotspot:
        #  Find the coordinates of the four points of the cell and calculate middle point of cell coordinate
        coordinate = [(xx[point[0]][0] + xx[point[0]+1][0])/2 , (yy[0][point[1]] + yy[0][point[1]+1])/2]
        newHotspot.append(coordinate)


    return  newHotspot


def GridCellsToPolygones(Hotspot: list, xx: list, yy: list):
    """This function takes the point based cell based hotspots generated using hotspot generation module using
    BFS_of_Cells and add coordinates having latitude longitude pair from the main grid.

        Parameters
        ----------
        Hotspots: list
            The grid point based hotspots generated by the BFS method
        xx : list
            X axis lists from the numpy meshgrid
        yy : list
            Y axis lists from the numpy meshgrid

        Returns
        -------
        list of list
            the hotspots list, where the initial point of the cell is converted into middle point of the cell and
            each point is represented by their latitude longitude pairs
        """
    newHotspotPolygones = []
    for count in range(len(Hotspot)):
        #  Find the coordinates of the four points of the cell and calculate middle point of cell coordinate

        # coordinate = [(xx[point[0]][0] + xx[point[0]+1][0])/2 , (yy[0][point[1]] + yy[0][point[1]+1])/2]
        point = Hotspot[count]
        point1 = [point[0], point[1] + 1]
        point2 = [point[0] + 1, point[1]]
        point3 = [point[0] + 1, point[1] + 1]

        points_count = 0
        for count2 in range(count, len(Hotspot)):
            if Hotspot[count2] == point1 or Hotspot[count2] == point2 or Hotspot[count2] == point3:
                points_count += 1
            if points_count >= 2:
                newHotspotPolygones.append(
                    Polygon([
                        (xx[point[0]][0], yy[0][point[1]]),
                        (xx[point[0] + 1][0], yy[0][point[1]]),
                        (xx[point[0] + 1][0], yy[0][point[1] + 1]),
                        (xx[point[0]][0], yy[0][point[1] + 1]),
                        (xx[point[0]][0], yy[0][point[1]])
                    ]))
                #print(newHotspotPolygones)
                #poly =
                #import geopandas as gpd
                #import  matplotlib.pyplot as plt
                #fig, axs = plt.subplots(2, 1, constrained_layout=False)
                #gdf = gpd.GeoDataFrame(index=[0], crs='epsg:4326', geometry=[poly])
                #gdf.plot(linewidth=0.8, ax=axs[0], edgecolor='red', color='r', facecolor="none")
                #plt.show()
                break

    if newHotspotPolygones:
        return unary_union(newHotspotPolygones)
    else:
        return